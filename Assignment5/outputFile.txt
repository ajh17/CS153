IDENTIFIER token: Two
IDENTIFIER token: here
SPECIAL_SYMBOL token: .
IDENTIFIER token: Hello
IDENTIFIER token: world
IDENTIFIER token: Abstract
RESERVED_WORD token: abstract
IDENTIFIER token: ABSTRACT
IDENTIFIER token: aBsTrAcT
IDENTIFIER token: What_is_that
SPECIAL_SYMBOL token: ?
CHARACTER token: 'x'
CHARACTER token: 'A'
CHARACTER token: '\'
CHARACTER token: 'b'
STRING token: "Hello, world."
STRING token: "It's Friday!"
STRING token: ""
SPECIAL_SYMBOL token: +
SPECIAL_SYMBOL token: -
SPECIAL_SYMBOL token: *
SPECIAL_SYMBOL token: /
SPECIAL_SYMBOL token: :
SPECIAL_SYMBOL token: =
SPECIAL_SYMBOL token: .
SPECIAL_SYMBOL token: ,
SPECIAL_SYMBOL token: ;
SPECIAL_SYMBOL token: :
SPECIAL_SYMBOL token: =
SPECIAL_SYMBOL token: <
SPECIAL_SYMBOL token: >
SPECIAL_SYMBOL token: <
SPECIAL_SYMBOL token: <=
SPECIAL_SYMBOL token: >=
SPECIAL_SYMBOL token: >
SPECIAL_SYMBOL token: (
SPECIAL_SYMBOL token: )
SPECIAL_SYMBOL token: [
SPECIAL_SYMBOL token: ]
SPECIAL_SYMBOL token: {
SPECIAL_SYMBOL token: }
SPECIAL_SYMBOL token: }
SPECIAL_SYMBOL token: ^
SPECIAL_SYMBOL token: .
SPECIAL_SYMBOL token: .
SPECIAL_SYMBOL token: <<=
SPECIAL_SYMBOL token: >>=
SPECIAL_SYMBOL token: :
SPECIAL_SYMBOL token: =
SPECIAL_SYMBOL token: <
SPECIAL_SYMBOL token: >=
SPECIAL_SYMBOL token: <=
SPECIAL_SYMBOL token: =
SPECIAL_SYMBOL token: >>=
SPECIAL_SYMBOL token: ==
INTEGER_NUMBER token: 0
INTEGER_NUMBER token: 1
REAL_NUMBER token: 12.0
INTEGER_NUMBER token: 00000000000000000012
REAL_NUMBER token: .12
REAL_NUMBER token: 1.
REAL_NUMBER token: .2
INTEGER_NUMBER token: 012
INTEGER_NUMBER token: 0x12
INTEGER_NUMBER token: 0xAb
INTEGER_NUMBER token: 0x0E12
REAL_NUMBER token: 12.
REAL_NUMBER token: 0.12
REAL_NUMBER token: .12
REAL_NUMBER token: 1.2e+2
REAL_NUMBER token: 12e+2
REAL_NUMBER token: 12e2
REAL_NUMBER token: 0e2
REAL_NUMBER token: 12e-2
REAL_NUMBER token: 12e-5
REAL_NUMBER token: .12e+2
REAL_NUMBER token: 12.e+2
REAL_NUMBER token: 12e-1
REAL_NUMBER token: 12e12
REAL_NUMBER token: .31415926
REAL_NUMBER token: 3.1415926
REAL_NUMBER token: 0.00031415926E4
REAL_NUMBER token: 0.00031415926e+00004
REAL_NUMBER token: 31415.926e-4
REAL_NUMBER token: 3141592600000000000000000000000e-30
RESERVED_WORD token: public
IDENTIFIER token: ICodeNode
IDENTIFIER token: parse
SPECIAL_SYMBOL token: (
IDENTIFIER token: Token
IDENTIFIER token: token
SPECIAL_SYMBOL token: )
RESERVED_WORD token: throws
IDENTIFIER token: Exception
SPECIAL_SYMBOL token: {
IDENTIFIER token: token
SPECIAL_SYMBOL token: =
IDENTIFIER token: nextToken
SPECIAL_SYMBOL token: (
SPECIAL_SYMBOL token: )
SPECIAL_SYMBOL token: ;
IDENTIFIER token: ICodeNode
IDENTIFIER token: loopNode
SPECIAL_SYMBOL token: =
IDENTIFIER token: ICodeFactory
SPECIAL_SYMBOL token: .
IDENTIFIER token: createICodeNode
SPECIAL_SYMBOL token: (
IDENTIFIER token: LOOP
SPECIAL_SYMBOL token: )
SPECIAL_SYMBOL token: ;
IDENTIFIER token: ICodeNode
IDENTIFIER token: testNode
SPECIAL_SYMBOL token: =
IDENTIFIER token: ICodeFactory
SPECIAL_SYMBOL token: .
IDENTIFIER token: createICodeNode
SPECIAL_SYMBOL token: (
IDENTIFIER token: TEST
SPECIAL_SYMBOL token: )
SPECIAL_SYMBOL token: ;
IDENTIFIER token: StatementParser
IDENTIFIER token: statementParser
SPECIAL_SYMBOL token: =
RESERVED_WORD token: new
IDENTIFIER token: StatementParser
SPECIAL_SYMBOL token: (
RESERVED_WORD token: this
SPECIAL_SYMBOL token: )
SPECIAL_SYMBOL token: ;
IDENTIFIER token: statementParser
SPECIAL_SYMBOL token: .
IDENTIFIER token: parseList
SPECIAL_SYMBOL token: (
IDENTIFIER token: token
SPECIAL_SYMBOL token: ,
IDENTIFIER token: loopNode
SPECIAL_SYMBOL token: ,
IDENTIFIER token: UNTIL
SPECIAL_SYMBOL token: ,
IDENTIFIER token: MISSING_UNTIL
SPECIAL_SYMBOL token: )
SPECIAL_SYMBOL token: ;
IDENTIFIER token: token
SPECIAL_SYMBOL token: =
IDENTIFIER token: currentToken
SPECIAL_SYMBOL token: (
SPECIAL_SYMBOL token: )
SPECIAL_SYMBOL token: ;
IDENTIFIER token: ExpressionParser
IDENTIFIER token: expressionParser
SPECIAL_SYMBOL token: =
RESERVED_WORD token: new
IDENTIFIER token: ExpressionParser
SPECIAL_SYMBOL token: (
RESERVED_WORD token: this
SPECIAL_SYMBOL token: )
SPECIAL_SYMBOL token: ;
IDENTIFIER token: ICodeNode
IDENTIFIER token: exprNode
SPECIAL_SYMBOL token: =
IDENTIFIER token: expressionParser
SPECIAL_SYMBOL token: .
IDENTIFIER token: parse
SPECIAL_SYMBOL token: (
IDENTIFIER token: token
SPECIAL_SYMBOL token: )
SPECIAL_SYMBOL token: ;
IDENTIFIER token: testNode
SPECIAL_SYMBOL token: .
IDENTIFIER token: addChild
SPECIAL_SYMBOL token: (
IDENTIFIER token: exprNode
SPECIAL_SYMBOL token: )
SPECIAL_SYMBOL token: ;
IDENTIFIER token: loopNode
SPECIAL_SYMBOL token: .
IDENTIFIER token: addChild
SPECIAL_SYMBOL token: (
IDENTIFIER token: testNode
SPECIAL_SYMBOL token: )
SPECIAL_SYMBOL token: ;
IDENTIFIER token: TypeSpec
IDENTIFIER token: exprType
SPECIAL_SYMBOL token: =
IDENTIFIER token: exprNode
SPECIAL_SYMBOL token: !=
RESERVED_WORD token: null
SPECIAL_SYMBOL token: ?
IDENTIFIER token: exprNode
SPECIAL_SYMBOL token: .
IDENTIFIER token: getTypeSpec
SPECIAL_SYMBOL token: (
SPECIAL_SYMBOL token: )
SPECIAL_SYMBOL token: :
IDENTIFIER token: Predefined
SPECIAL_SYMBOL token: .
IDENTIFIER token: undefinedType
SPECIAL_SYMBOL token: ;
RESERVED_WORD token: if
SPECIAL_SYMBOL token: (
SPECIAL_SYMBOL token: !
IDENTIFIER token: TypeChecker
SPECIAL_SYMBOL token: .
IDENTIFIER token: isBoolean
SPECIAL_SYMBOL token: (
IDENTIFIER token: exprType
SPECIAL_SYMBOL token: )
SPECIAL_SYMBOL token: )
SPECIAL_SYMBOL token: {
IDENTIFIER token: errorHandler
SPECIAL_SYMBOL token: .
IDENTIFIER token: flag
SPECIAL_SYMBOL token: (
IDENTIFIER token: token
SPECIAL_SYMBOL token: ,
IDENTIFIER token: INCOMPATIBLE_TYPES
SPECIAL_SYMBOL token: ,
RESERVED_WORD token: this
SPECIAL_SYMBOL token: )
SPECIAL_SYMBOL token: ;
SPECIAL_SYMBOL token: }
RESERVED_WORD token: return
IDENTIFIER token: loopNode
SPECIAL_SYMBOL token: ;
SPECIAL_SYMBOL token: }
