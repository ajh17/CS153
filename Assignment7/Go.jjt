options {
    JJTREE_OUTPUT_DIRECTORY="src/wci/frontend";
    NODE_EXTENDS="wci.intermediate.icodeimpl.ICodeNodeImpl";
    MULTI=true;
    VISITOR=true;
}

PARSER_BEGIN(GoParser)
package wci.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;

import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

public class GoParser
{
    private static final String SOURCE_SUFFIX = ".go";
    private static final String OUTPUT_SUFFIX = ".j";

    private static SymTabStack symTabStack;
    private static SymTabEntry programId;

    public static void main(String[] args)
        throws Exception
    {
        // Create and initialize the symbol table stack.
        symTabStack = SymTabFactory.createSymTabStack();
        Predefined.initialize(symTabStack);

        // Process the source file path which ends in .go
        // and create the output file path which ends in .j
        String sourceFilePath = args[0];
        int truncatedLength = sourceFilePath.length() - SOURCE_SUFFIX.length();
        int suffixIndex = sourceFilePath.lastIndexOf(SOURCE_SUFFIX);
        String objectFilePath = (suffixIndex == truncatedLength)
            ? sourceFilePath.substring(0, truncatedLength) + OUTPUT_SUFFIX
            : sourceFilePath + OUTPUT_SUFFIX;

        // Parse a Go program.
        Reader reader = new FileReader(sourceFilePath);
        GoParser parser = new GoParser(reader);
        SimpleNode rootNode = parser.start();

        // Print the cross-reference table.
        CrossReferencer crossReferencer = new CrossReferencer();
        crossReferencer.print(symTabStack);

        // Visit the parse tree nodes to decorate them with type information.
        TypeSetterVisitor typeVisitor = new TypeSetterVisitor();
        rootNode.jjtAccept(typeVisitor, null);

        // Create and initialize the ICode wrapper for the parse tree.
        ICode iCode = ICodeFactory.createICode();
        iCode.setRoot(rootNode);
        programId.setAttribute(ROUTINE_ICODE, iCode);

        // Print the parse tree.
        ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
        treePrinter.print(symTabStack);
    }
}
PARSER_END(GoParser)

SKIP : {
   <IGNORE : [" ", "\r", "\n", "\t"]>
   | <"//" (~["\n", "\r"])*>
   | <"/*"> : MULTI_LINE_COMMENT
}

<MULTI_LINE_COMMENT> SKIP: {
    "*/" : DEFAULT
}

<MULTI_LINE_COMMENT> MORE: {
    <~[]>
}

/*************************
  -- Production Rules --
*************************/

SimpleNode start() #void : { SimpleNode rootNode = null; }
{
    { System.out.println("\n-----BEGIN PARSING-----\n"); }
    try {
        (
            statement()
        )*
        <EOF> {
            { System.out.println("\n-----FINISHED PARSING-----"); }
            return rootNode;
        }
    }
    catch (ParseException ex) {
        handleError(ex);
        return null;
    }
}

void statement() #void : {}
{
      LOOKAHEAD(2) declarationStatement()
    | LOOKAHEAD(2) assignmentStatement()
    | switchStatement()
    | ifStatement()
    | forStatement()
    | <SEMICOLON>
}

void statementList() #void : {}
{
    (statement())*
}

void declarationStatement() #void : {}
{
    variableDeclaration()
    | functionDeclaration()
}

void variableDeclaration() #void : {}
{
    <IDENTIFIER>
    <TYPE>
    (LOOKAHEAD(2) <SEMICOLON>)?
}

void functionDeclaration() #void : {}
{
    "func"
    <IDENTIFIER>
    "("
    parameterList()
    ")"
    (<IDENTIFIER> | <TYPE>)?
    block()
}

void parameter() #void : {}
{
    (<IDENTIFIER>)?
    <TYPE>
}

void parameterList() #void : {}
{
    (parameter() ("," parameter())*)?
}

void block() #void : {}
{
    "{"
    statementList()
    "}"
}

void ifStatement() #void : {}
{
    "if"
    expression()
    block()
    (LOOKAHEAD(2) "else" "if" expression() block())*
    ("else" block())?
}

void switchStatement() #void : {}
{
    "switch"
    (expression())?
    switchBlock()
}

void switchBlock() #void : {}
{
    "{"
    caseGroup()
    "}"
}

void caseGroup() #void : {}
{
    (
        "case"
        expressionList()
        ":"
        statementList()
    )*

    (
        "default"
        ":"
        statementList()
    )?
}

void assignmentStatement() : {}
{
    (
        <IDENTIFIER>
        (
            (
                (
                    ("=" | ":=")
                    operand() ((<ADD_OP> | <MUL_OP>) operand())*
                )
                |
                    incOrDec()
            )

            (LOOKAHEAD(2) <SEMICOLON>)?
        )
    )
    |
    (
        incOrDec()
        <IDENTIFIER>
        (LOOKAHEAD(2) <SEMICOLON>)?
    )
}

void incOrDec() #void : {}
{
    ("++" | "--")
}

void forStatement() #void : {}
{
    "for"
    forClause()
    block()
}

void forClause() #void : {}
{
    (LOOKAHEAD(2) assignmentStatement())?
    (LOOKAHEAD(2) expression())?
    (<SEMICOLON>)?
    (assignmentStatement())?
}

void operand() #void : {}
{
    (
        (
            (<INTEGER_NUMBER> | <REAL_NUMBER> | <RAW_STRING> | <INTERPRETED_STRING> | <IDENTIFIER>)
        )
        |
        (
            "("
            expression()
            ")"
        )
    )
}

void expression() #void : {}
{
    operand() (<BINARY_OP> operand())*
}

void expressionList() #void : {}
{
    expression()
    ("," expression())*
}

void Error() #void : {}
{
    <ERROR>
}

/********************s
    -- Tokens --
********************/

TOKEN : {
    <RESERVED_WORD: "break" | "default" | "func" | "interface" | "select" | "case" | "defer"
        | "go" | "map" | "struct" | "chan" | "else" | "goto" | "package" | "switch"
        | "const" | "fallthrough" | "if" | "range" | "type" | "continue"
        | "for" | "import" | "return" | "var">
    |
    <TYPE: "int">
    |
    <INTEGER_NUMBER: <DIGIT> (<DIGIT>)*>
    |
    <REAL_NUMBER: <INTEGER_NUMBER> "." (<INTEGER_NUMBER>)?>
    |
    <RAW_STRING: "`" (<ALPHANUMERIC> | <RAW_LITERAL_SYMBOL> | <NEWLINE>)* "`">
    |
    <INTERPRETED_STRING: "\"" (<ALPHANUMERIC> | <ESCAPED_CHAR>
            | <INTERPRETED_LITERAL_SYMBOL> | <WHITE_SPACE>)* "\"">

        | <#NEWLINE: ["\r", "\n"]>
        | <#ESCAPED_CHAR: "\\" ("a" | "b" | "f" | "n" | "r" | "t" | "v" | "\\" | "'" | "\"")>
        | <#WHITE_SPACE: <NEWLINE> | "\t" | " ">
    |
    <SEMICOLON: ";">
    |
    <DOT: ".">
    |
    <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | "_")*>
        | <IDENTIFIER_LIST: <IDENTIFIER> ("," <IDENTIFIER>)*>
        | <#LETTER: ["a"-"z", "A"-"Z"]>
        | <#DIGIT: ["0"-"9"]>
        | <#ALPHANUMERIC: (<LETTER> | <DIGIT>)+>
        | <ADD_OP: ["+", "-"]>
        | <MUL_OP: ("*" | "/" | "%")>
        | <#REL_OP: "==" | "!=" | "<" | "<=" | ">" | ">=">
        | <UNARY_OP: "+" | "-" | "!" | "^" | "*" | "&">
        | <ASSIGN_OP: (":" | <ADD_OP> | <MUL_OP>)? "=">
        | <BINARY_OP: "||" | "&&" | <REL_OP> | <ADD_OP>| <MUL_OP>>
        | <#COMMON_LITERAL_SYMBOL: "~" | "!" | "@" | "#" | "$" | "%" | "^"
            | "&" | "*"| "(" | ")" | "_" | "-" | "+" | "=" | "<" | ">"
            | "," | "." | "/"| "?" | ":" | ";" | "[" | "]" | "{" | "}" | "|">
        | <#RAW_LITERAL_SYMBOL: <COMMON_LITERAL_SYMBOL> | "\"" | "\\">
        | <#INTERPRETED_LITERAL_SYMBOL: <COMMON_LITERAL_SYMBOL> | "'">
    |
    <SPECIAL_SYMBOL:
            "+" | "&" | "+=" | "&=" | "&&" | "==" | "!=" | "(" | ")"
            | "-" | "|" | "-=" | "|=" | "||" | "<" | "<=" | "[" | "]"
            | "*" | "^" | "*=" | "^=" | "<-" | ">" | ">=" | "{"  | "}"
            | "/" | "<<" | "/=" | "<<=" | "++" | "=" | ":=" | "," | ";"
            | "%" | ">>" | "%=" | ">>=" | "--" | "!" | "..." |  "." | ":"
            | "&^" | "&^=">
    |
    <ERROR: ~["\r", "\n"]>
}

JAVACODE
void processVariableDecl(Token token, int index, ArrayList<SymTabEntry> variableList) #void
{
    SymTabEntry variableId = symTabStack.enterLocal(token.image);
    variableId.setIndex(index);
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
    variableList.add(variableId);
}

JAVACODE
String handleError(ParseException ex) #void
{
    Token token = ex.currentToken;
    System.out.println(ex.getMessage());

    do {
    	token = getNextToken();
    } while (token.kind != SEMICOLON);

	jjtree.popNode();
    return token.image;
}