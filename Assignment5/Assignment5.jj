options {
    BUILD_PARSER=false;
    OUTPUT_DIRECTORY="src/";
}

PARSER_BEGIN(Assignment5)
    public class Assignment5 {}
PARSER_END(Assignment5)

TOKEN_MGR_DECLS : {
    public static void main(String[] args)
    {
        StringBuilder fileString = new StringBuilder();
        java.io.BufferedReader br = null;
        try {
            br = new java.io.BufferedReader(new java.io.FileReader("input.txt"));
            int i = 0;
            char[] buffer = new char[1024];

            while ((i = br.read(buffer)) != -1)
                fileString.append(buffer, 0, i);
        }
        catch (java.io.IOException ex) {
        }
        finally {
            try {
                br.close();
            }
            catch (java.io.IOException ex) {
            }
        }

        java.io.StringReader sr = new java.io.StringReader(fileString.toString());
        SimpleCharStream scs = new SimpleCharStream(sr);
        Assignment5TokenManager mgr = new Assignment5TokenManager(scs);

        while (mgr.getNextToken().kind != EOF) {}
    }
}

// TODO: Skip multi-line comments. Already skips single line ones. ( // )
SKIP : {
   <IGNORE : [" ", "\r", "\n", "\t"]>
   | <"//" (~["\n", "\r"])*>
   | <"/*"> : MULTI_LINE_COMMENT
}

<MULTI_LINE_COMMENT> SKIP: {
    "*/" : DEFAULT
}

<MULTI_LINE_COMMENT> MORE: {
    <~[]>
}

// TODO: Not complete yet
TOKEN: {
    <CHARACTER: "'" <LETTER> "'">
        { debugStream.println("CHARACTER token: " + matchedToken.image); }
    |
    <RESERVED_WORD:
    "abstract"  | "default" | "goto" | "package" | "synchronized"
    | "assert" | "do" | "if" | "private" | "this"
    | "boolean" | "double" | "implements" | "protected" | "throw"
    | "break" | "else" | "import" | "public" | "throws"
    | "byte" | "enum" | "instanceof" | "return" | "transient"
    | "case" | "extends" | "int" | "short" | "true"
    | "catch" | "false" | "interface" | "static" | "try"
    | "char" | "final" | "long" | "strictfp" | "void"
    | "class" | "finally" | "native" | "super" | "volatile"
    | "const" | "float" | "new" | "switch" | "while"
    | "continue" | "for" | "null"
    >
    |
    <SPECIAL_SYMBOL_TOKEN:
    "~" | "!" | "@" | "%" | "^" | "&" | "*" | "-" | "+" | "="
    | "|" | "/" | ":" | ";" | "?" | "<" | ">" | "." | ","
    | "'" | "\"" | "(" | ")" | "[" | "]" | "{" | "}"
    | "++" | "--" | "<<" | ">>" | "<=" | ">=" | "+=" | "-="
    | "*=" | "/=" | "==" | "!=" | "%=" | "&=" | "^=" | "||"
    | "&&" | "!=" | "<<=" | ">>="
    >
        { debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
    | <IDENTIFIER : <LETTER> (<LETTER> | <DIGIT> | "_")*>
        { debugStream.println("IDENTIFIER token: " + matchedToken.image); }
    | <INTEGER_NUMBER: <DECIMAL> | <OCTAL> | <HEXADECIMAL>>
    | <DECIMAL: ["1"-"9"] (["0"-"9"])*>
    | <OCTAL: "0" (["0"-"7"])*>
    | <HEXADECIMAL: ("0x"|"0X") (<DIGIT>|<LETTER>)*>
    | <#LETTER: ["a"-"z", "A"-"Z"]>
    | <#DIGIT: ["0" - "9"]>
    | <#EXPONENT: "E"|"e">
}
