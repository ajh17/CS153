options {
    BUILD_PARSER=true;
    OUTPUT_DIRECTORY="src";
    //DEBUG_PARSER=true;
    //DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(GoParser)
import java.io.*;

public class GoParser
{
    public static void main(String[] args)
    {
        BufferedReader br = null;

        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(args[0])));
            GoParser parser = new GoParser(br);

            try {
                parser.start();
            } catch (ParseException ex) {}

        } catch (java.io.IOException ex) {}
        finally {

            try {
                br.close();
            } catch (java.io.IOException ex) {}
        }
    }
}
PARSER_END(GoParser)

SKIP : {
   <IGNORE : [" ", "\r", "\n", "\t"]>
   | <"//" (~["\n", "\r"])*>
   | <"/*"> : MULTI_LINE_COMMENT
}

<MULTI_LINE_COMMENT> SKIP: {
    "*/" : DEFAULT
}

<MULTI_LINE_COMMENT> MORE: {
    <~[]>
}

/*************************
  -- Production Rules --
*************************/

void start() : {}
{
    { System.out.println("STARTING TO PARSE!!!!!"); }

    (
        statement()
    )*

    <EOF>
    { System.out.println("\nFINISHED PARSING!!!!!"); }
}

void statement() : {}
{
      LOOKAHEAD(2) declarationStatement()
    | LOOKAHEAD(2) { System.out.println("\n==========ASSIGNMENT========="); } assignmentStatement()
    | { System.out.println("\n==========SWITCH STATEMENT========="); } switchStatement()
    | { System.out.println("\n==========IF STATEMENT========="); } ifStatement()
    | { System.out.println("\n==========FOR STATEMENT========="); } forStatement()
    | <SEMICOLON> { System.out.print(token.image); }
}

void declarationStatement() : {}
{
    { System.out.println("\n==========VARIABLE DECLARATION========="); } variableDeclaration()
    | { System.out.println("\n==========FUNCTION DECLARATION========="); } functionDeclaration()
}

void variableDeclaration() : {}
{
    <IDENTIFIER> { System.out.print(token.image + " "); }
    (<TYPE> | <IDENTIFIER>) { System.out.print(token.image + " "); }
    (LOOKAHEAD(2) <SEMICOLON> { System.out.print(token.image + " "); })?
}

void functionDeclaration() : {}
{
    "func" { System.out.print(token.image + " "); }
    <IDENTIFIER> { System.out.print(token.image + " "); }
    "(" { System.out.print(token.image + " "); }
    parameterList()
    ")" { System.out.print(token.image + " "); }
    (<IDENTIFIER> | <TYPE>)?
    block()
}

void parameter() : {}
{
    (<IDENTIFIER> { System.out.print(token.image + " "); })?
    <TYPE> { System.out.print(token.image + " "); }
}

void parameterList() : {}
{
    (parameter() ("," { System.out.print(token.image + " "); } parameter())*)?
}

void statementList() : {}
{
    (statement())*
}

void block() : {}
{
    "{" { System.out.print(" " + token.image + "\n\t"); }
    statementList()
    "}" { System.out.print("\n" + token.image + "\n"); }
}

void ifStatement() : {}
{
    "if" { System.out.print(token.image + " "); }
    expression()
    block()
    (LOOKAHEAD(2) "else" { System.out.print(token.image + " "); } "if" { System.out.print(token.image + " "); } expression() block())*
    ("else" { System.out.print(token.image + " "); } block())?
}

void switchStatement() : {}
{
    "switch" { System.out.print(token.image + " "); }
    (expression())?
    switchBlock()
}

void switchBlock() : {}
{
    "{" { System.out.print(" " + token.image + "\n\t"); }
    caseGroup()
    "}" { System.out.print("\n" + token.image + "\n"); }
}

void caseGroup() : {}
{
    (
        "case" { System.out.print("\n" + token.image + " "); }
        expressionList()
        ":" { System.out.print(token.image); }
        statementList()
    )*

    (
        "default" { System.out.print("\n" + token.image); } ":" { System.out.print(token.image + " "); }
        statementList()
    )?
}

void assignmentStatement() : {}
{
    (
        <IDENTIFIER> { System.out.print(token.image); }
        (
            (
                (
                    ("=" | ":=") { System.out.print(token.image); }
                    operand() ((<ADD_OP> | <MUL_OP>) { System.out.print(token.image + " "); } operand())*
                )
                |
                    incOrDec()
            )

            (LOOKAHEAD(2) <SEMICOLON> { System.out.print(token.image); })?
        )
    )
    |
    (
        incOrDec()
        <IDENTIFIER> { System.out.print(token.image); }
        (LOOKAHEAD(2) <SEMICOLON> { System.out.print(token.image); })?
    )
}

void incOrDec() : {}
{
    ("++" | "--") { System.out.print(token.image); }
}

void forStatement() : {}
{
    "for" { System.out.print(token.image + " "); }
    forClause()
    block()
}

void forClause() : {}
{
    (LOOKAHEAD(2) assignmentStatement())?
    (LOOKAHEAD(2) expression())? (<SEMICOLON> { System.out.print(token.image); })?
    (assignmentStatement())?
}

// TODO: Not currently used. Delete or use it?
void rangeClause() : {}
{
    (
        LOOKAHEAD(2)

        expression() "=" { System.out.print(token.image); }
        |
        <IDENTIFIER> { System.out.print(token.image); }

        ":=" { System.out.print(token.image); }
    )

    "range" { System.out.print(token.image); } expression()
}

void operand(): {}
{
    (
        (
            (<INTEGER_NUMBER> | <REAL_NUMBER> | <RAW_STRING> | <INTERPRETED_STRING>
            | <IDENTIFIER>) { System.out.print(token.image); }
        )
        |
        (
            "(" { System.out.print(token.image + " "); }
            expression()
            ")" { System.out.print(token.image + " "); }
        )
    )
}

void expression() : {}
{
    operand() (<BINARY_OP> { System.out.print(token.image + " "); } operand())*
}

void expressionList() : {}
{
    expression() ("," { System.out.print(token.image + " "); } expression())*
}

void Error() : {}
{
    <ERROR>
}

/********************s
    -- Tokens --
********************/

TOKEN : {
    <RESERVED_WORD: "break" | "default" | "func" | "interface" | "select" | "case" | "defer"
        | "go" | "map" | "struct" | "chan" | "else" | "goto" | "package" | "switch"
        | "const" | "fallthrough" | "if" | "range" | "type" | "continue"
        | "for" | "import" | "return" | "var">
    |
    <TYPE: "int">
    |
    <INTEGER_NUMBER: <DIGIT> (<DIGIT>)*>
    |
    <REAL_NUMBER: <INTEGER_NUMBER> "." (<INTEGER_NUMBER>)?>
    |
    <RAW_STRING: "`" (<ALPHANUMERIC> | <RAW_LITERAL_SYMBOL> | <NEWLINE>)* "`">
    |
    <INTERPRETED_STRING: "\"" (<ALPHANUMERIC> | <ESCAPED_CHAR>
            | <INTERPRETED_LITERAL_SYMBOL> | <WHITE_SPACE>)* "\"">

        | <#NEWLINE: ["\r", "\n"]>
        | <#ESCAPED_CHAR: "\\" ("a" | "b" | "f" | "n" | "r" | "t" | "v" | "\\" | "'" | "\"")>
        | <#WHITE_SPACE: <NEWLINE> | "\t" | " ">
    |
    <SEMICOLON: ";">
    |
    <DOT: ".">
    |
    <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | "_")*>
        | <IDENTIFIER_LIST: <IDENTIFIER> ("," <IDENTIFIER>)*>
        | <#LETTER: ["a"-"z", "A"-"Z"]>
        | <#DIGIT: ["0"-"9"]>
        | <#ALPHANUMERIC: (<LETTER> | <DIGIT>)+>
        | <ADD_OP: ["+", "-"]>
        | <MUL_OP: ("*" | "/" | "%")>
        | <#REL_OP: "==" | "!=" | "<" | "<=" | ">" | ">=">
        | <UNARY_OP: "+" | "-" | "!" | "^" | "*" | "&">
        | <ASSIGN_OP: (":" | <ADD_OP> | <MUL_OP>)? "=">
        | <BINARY_OP: "||" | "&&" | <REL_OP> | <ADD_OP>| <MUL_OP>>
        | <#COMMON_LITERAL_SYMBOL: "~" | "!" | "@" | "#" | "$" | "%" | "^"
            | "&" | "*"| "(" | ")" | "_" | "-" | "+" | "=" | "<" | ">"
            | "," | "." | "/"| "?" | ":" | ";" | "[" | "]" | "{" | "}" | "|">
        | <#RAW_LITERAL_SYMBOL: <COMMON_LITERAL_SYMBOL> | "\"" | "\\">
        | <#INTERPRETED_LITERAL_SYMBOL: <COMMON_LITERAL_SYMBOL> | "'">
    |
    <SPECIAL_SYMBOL:
            "+" | "&" | "+=" | "&=" | "&&" | "==" | "!=" | "(" | ")"
            | "-" | "|" | "-=" | "|=" | "||" | "<" | "<=" | "[" | "]"
            | "*" | "^" | "*=" | "^=" | "<-" | ">" | ">=" | "{"  | "}"
            | "/" | "<<" | "/=" | "<<=" | "++" | "=" | ":=" | "," | ";"
            | "%" | ">>" | "%=" | ">>=" | "--" | "!" | "..." |  "." | ":"
            | "&^" | "&^=">
    |
    <ERROR: ~["\r", "\n"]>
}

