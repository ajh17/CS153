options {
    BUILD_PARSER=true;
    OUTPUT_DIRECTORY="src/";
    //DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(Assignment6)
    public class Assignment6 {}
PARSER_END(Assignment6)

SKIP : {
   <IGNORE : [" ", "\r", "\n", "\t"]>
   | <"//" (~["\n", "\r"])*>
   | <"/*"> : MULTI_LINE_COMMENT
}

<MULTI_LINE_COMMENT> SKIP: {
    "*/" : DEFAULT
}

<MULTI_LINE_COMMENT> MORE: {
    <~[]>
}

TOKEN_MGR_DECLS : {
    public static void main(String[] args)
    {
        StringBuilder fileString = new StringBuilder();
        java.io.BufferedReader br = null;
        if (args.length != 2) {
            // Javacc doesn't compile with println statements.
        }
        try {
            br = new java.io.BufferedReader(new java.io.InputStreamReader(new
                        java.io.FileInputStream(args[0]), "UTF-16"));
            int i = 0;
            char[] buffer = new char[1024];

            while ((i = br.read(buffer)) != -1)
                fileString.append(buffer, 0, i);
        }
        catch (java.io.IOException ex) {
        }
        finally {
            try {
                br.close();
            }
            catch (java.io.IOException ex) {
            }
        }

        java.io.StringReader sr = new java.io.StringReader(fileString.toString());
        SimpleCharStream scs = new SimpleCharStream(sr);
        Assignment6TokenManager mgr = new Assignment6TokenManager(scs);

        while (mgr.getNextToken().kind != EOF) {}
    }
}

TOKEN : {
    <RESERVED_WORD: "break" | "default" | "func" | "interface" | "select" | "case" | "defer"
        | "go" | "map" | "struct" | "chan" | "else" | "goto" | "package" | "switch"
        | "const" | "fallthrough" | "if" | "range" | "type" | "continue"
        | "for" | "import" | "return" | "var">
        { debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
    |
    <LITERAL: <INTEGER_NUMBER> | <REAL_NUMBER> | <STRING>>
        { debugStream.println("BASIC_LITERAL token: " + matchedToken.image); }
    |
    <SIMPLE_STATEMENT: <ASSIGNMENT_STATEMENT> | <EXPRESSION>>
        { debugStream.println("SIMPLE_STATEMENT token: " + matchedToken.image); }
    |
    <ASSIGNMENT_STATEMENT: <IDENTIFIER> <ASSIGN_OPER> <EXPRESSION>>
        { debugStream.println("ASSIGNMENT_STATEMENT token: " + matchedToken.image); }
    |
    <ASSIGN_OPER: (<ADD_OP> | <MUL_OP>)? "=">
        { debugStream.println("ASSIGN_OPER token: " + matchedToken.image); }
    |


    //TODO: Need to implement expressions
    <EXPRESSION: "jjiji">


    |
    <INTEGER_NUMBER: <DIGIT> (<DIGIT>)*>
        { debugStream.println("INTEGER_NUMBER token: " + matchedToken.image); }
    |
    <REAL_NUMBER: <INTEGER_NUMBER> "." (<INTEGER_NUMBER>)?>
        { debugStream.println("REAL_NUMBER token: " + matchedToken.image); }
    |
    <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | "_")*>
        { debugStream.println("IDENTIFIER token: " + matchedToken.image); }

    |
    <SPECIAL_SYMBOL:
        "+" | "&" | "+=" | "&=" | "&&" | "==" | "!=" | "(" | ")"
        | "-" | "|" | "-=" | "|=" | "||" | "<" | "<=" | "[" | "]"
        | "*" | "^" | "*=" | "^=" | "<-" | ">" | ">=" | "{"  | "}"
        | "/" | "<<" | "/=" | "<<=" | "++" | "=" | ":=" | "," | ";"
        | "%" | ">>" | "%=" | ">>=" | "--" | "!" | "..." |  "." | ":"
        | "&^" | "&^=">
        { debugStream.println("SPECIAL_SYMBOL token: " + matchedToken.image); }

        | <#LETTER: ["a"-"z", "A"-"Z"]>
        | <#DIGIT: ["0"-"9"]>
        | <#ALPHANUMERIC: (<LETTER> | <DIGIT>)+>
        | <#ADD_OP: ["+", "-"]>
        | <#MUL_OP: ("*" | "/" | "%")>
        | <#REL_OP: ("==" | "!=" | "<" | "<=" | ">" | ">=") >
        | <#UNARY_OP: ("+" | "-" | "!" | "^" | "*" | "&")>
        | <#BINARY_OP: "||" | "&&">
        // Literal symbols only does not contain SINGLE_QUOTE used to start and end raw string literals
        | <#LITERAL_SYMBOL: ("~" | "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*"
            | "(" | ")" | "_" | "-" | "+" | "=" | "<" | ">" | "," | "." | "/"
            | "?" | ":" | ";" | "\"" | "[" | "]" | "{" | "}" | "|" | "\\")>

    |
    <STRING: <RAW_STRING> | <INTERPRETED_STRING>>
        { debugStream.println("STRING token: " + matchedToken.image); }
        | <#RAW_STRING: "`" (<ALPHANUMERIC> | <LITERAL_SYMBOL> | <NEWLINE>)* "`">
        | <#INTERPRETED_STRING: "\"" (<ALPHANUMERIC> | <ESCAPED_CHAR> | <LITERAL_SYMBOL> | <WHITE_SPACE>)* "\"">
        | <#NEWLINE: ["\r", "\n"]>
        | <#ESCAPED_CHAR: "\\" ("a" | "b" | "f" | "n" | "r" | "t" | "v" | "\\" | "'" | "\"")>
        | <#WHITE_SPACE: <NEWLINE> | "\t" | " ">

    |
    <FOR_STATEMENT: "for" (<EXPRESSION> | <FOR_CLAUSE> | <RANGE_CLAUSE>)? >
        | <#FOR_CLAUSE: <SIMPLE_STATEMENT> ";" <EXPRESSION> ";" <SIMPLE_STATEMENT> >
        | <#RANGE_CLAUSE: ( <EXPRESSION> "=" | <IDENTIFIER> ":=" ) "range" <EXPRESSION>>
}
