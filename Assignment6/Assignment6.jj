options {
    BUILD_PARSER=true;
    OUTPUT_DIRECTORY="src/";
}

PARSER_BEGIN(Assignment6)
    public class Assignment6 {}
PARSER_END(Assignment6)

SKIP : {
   <IGNORE : [" ", "\r", "\n", "\t"]>
   | <"//" (~["\n", "\r"])*>
   | <"/*"> : MULTI_LINE_COMMENT
}

<MULTI_LINE_COMMENT> SKIP: {
    "*/" : DEFAULT
}

<MULTI_LINE_COMMENT> MORE: {
    <~[]>
}

TOKEN_MGR_DECLS : {
    public static void main(String[] args)
    {
        StringBuilder fileString = new StringBuilder();
        java.io.BufferedReader br = null;
        if (args.length != 2) {
            System.out.println("Did not provide an input file.");
            System.exit(0);
        }
        try {
            br = new java.io.BufferedReader(new java.io.FileReader(args[0]));
            int i = 0;
            char[] buffer = new char[1024];

            while ((i = br.read(buffer)) != -1)
                fileString.append(buffer, 0, i);
        }
        catch (java.io.IOException ex) {
        }
        finally {
            try {
                br.close();
            }
            catch (java.io.IOException ex) {
            }
        }

        java.io.StringReader sr = new java.io.StringReader(fileString.toString());
        SimpleCharStream scs = new SimpleCharStream(sr);
        Assignment5TokenManager mgr = new Assignment5TokenManager(scs);

        while (mgr.getNextToken().kind != EOF) {}
    }
}

// TODO: Reserved word tokens may be removed depending on the subset of Go we choose.
// TODO: Decide whether we want to implement Unicode at all. If so, change appropriate tokens.
TOKEN : {
    <RESERVED_WORD: 
    "break" | "default" | "func" | "interface" | "select" | "case" | "defer"
    | "go" | "map" | "struct" | "chan" | "else" | "goto" | "package" | "switch"
    | "const" | "fallthrough" | "if" | "range" | "type" | "continue"
    | "for" | "import" | "return" | "var"
    >
         { debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
    |
    <SPECIAL_SYMBOL:
    "+" | "&" | "+=" | "&=" | "&&" | "==" | "!=" | "(" | ")"
    | "-" | "|" | "-=" | "|=" | "||" | "<" | "<=" | "[" | "]"
    | "*" | "^" | "*=" | "^=" | "<-" | ">" | ">=" | "{"  | "}"
    | "/" | "<<" | "/=" | "<<=" | "++" | "=" | ":=" | "," | ";"
    | "%" | ">>" | "%=" | ">>=" | "--" | "!" | "..." |  "." | ":"
    | "&^" | "&^="
        { debugStream.println("SPECIAL_SYMBOL token: " + matchedToken.image); }
    | <INTEGER_NUMBER: <DECIMAL> | <OCTAL> | <HEXADECIMAL>>
        { debugStream.println("INTEGER_NUMBER token: " + matchedToken.image); }
    | <REAL_NUMBER: <DECIMAL> "." (<DECIMAL>)? (<EXPONENT>)?) | (<DECIMAL> <EXPONENT>) 
        | ("." <DECIMAL> (<EXPONENT>)?)>
        { debugStream.println("REAL_NUMBER token: " + matchedToken.image); }
    | <IMAGINARY_NUMBER ( (<DIGIT>)+ | <REAL_NUMBER>) "i">
    | <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | "_")*>
        { debugStream.println("IDENTIFIER token: " + matchedToken.image); }
    | <#OCTAL: "0" (["0"-"7"])*>
    | <#HEXADECIMAL: ("0x"|"0X") (["A-F", "a-f", <DIGIT>])+>
    | <#EXPONENT: ("E"|"e") ("+"|"-")? <DECIMAL>>
    | <#LETTER: ["a"-"z", "A"-"Z"]>
    | <#DIGIT: ["0"-"9"]>
    | <#DECIMAL: <DIGIT> (<DIGIT>)*>
}
